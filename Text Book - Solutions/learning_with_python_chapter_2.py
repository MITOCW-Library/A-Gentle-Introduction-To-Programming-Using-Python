# -*- coding: utf-8 -*-
"""Learning with Python - Chapter 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iz3UTB1iVChg1seoWVltlqENSi337od9

## **Chapter 2**

# **Variables, Expressions and Statements**

# Value
A letter or a number that a program manipulates

Types of values
1. Integer
2. String
"""

print(4)

"""If not sure what type a value has, the interpreter can tell you"""

type('Hello, World!')

type(17)

type(12.5)

"""If values of '17' and '12.5' are in quotation marks then they represent strings"""

type('17')

type('12.5')

"""Using commas between groups of three digits is illegal in Python, but is a legal expression"""

print(1,000,000)

"""# Variables

A variable is a name that refers to a value. Assignment statement creates n ew variables and gives them values
"""

msg = "What's up, Doc"
n = 17
pi = 3.14159

"""**State Diagram**
- Write the name with an arrow pointing to the variable's value. It shows what state each of the variable's is in. This diagram shows the result of the assignment statements.

       msg -----> "What's up, Doc?"
       n ------> 17
       pi -------> 3.14159

"""

print(msg)
print(n)
print(pi)

"""In each case, the result is the value of the variable."""

type(msg)

type(n)

type(pi)

"""# Statements

An instruction that the Pytthon interpreter can execute.
Two kindsa of statements
1. Print
2. Assignment

When you type a statement on the command line, Python executes it and displays the result. if there is one. The result of the print statement is a value. Assignment statements don't produce a result.

Script - sequence of statements

If more than one statement, the reults appear one at a time as the statements execute.
"""

print(1)
x = 2
print(x)

"""Again, the assignment statement produces no output

# Evaluating Expressions

It is a combination of values, variables and operators
"""

1+1

17

x

"""Evaluating an expression is not same as printing a value
 - with and without quotation marks
"""

msg = 'Hello, World!'
msg        # with quotation marks

print(msg)  # prints output without quotation marks

"""# Operators and Operands

Operators - special symbols that represent computations like addition and subtraction

Operands - values the operator uses
"""

20 + 32

hour = 2
hour - 1

hour = 2
minute = 59
hour * 60 + minute

minute/60

minute*100/60

5**2

(5+9)*(15-7)

"""# Order of operations

When more than one operator appears in an expression, the order of evaluation depends on the rules of precedence

**Parenthesis**
"""

2 * (3-1)

(1+1)**(5-2)

(minute*100) / 60

"""**Exponentiation**"""

2 ** 1 + 1

3 * 1 ** 3

"""**Multiplication and Division**"""

2 * 3 - 1

2/3-1   # integer division 2/3 = 0

"""**Left to Right**"""

minute*100/60

5900/60

"""**Right to Left**"""

59 * 1  # 59*1 which is wrong

"""**Operations on Strings**

Initially, cannot perform mathematical operations on strings

**Concatenation**  - '+' operator, joining twom operands by linking them end-to-end
"""

fruit = 'banana'
bakedGood = ' nut bread'  # space before nut is part of the string and is necessary to produce the space between concatenated strings
print(fruit + bakedGood)

"""  '*'  - operator works on strings; it performs repetition.

  One has to be string and other has to be integer
"""

'Fun'*3

"""**Composition**  - ability to take small building blocks and compose them."""

print(17 + 3)

hour = 2
minute = 59
print('Number of minutes since midnight:', hour * 60 + minute)

minute = 59
percentage = (minute * 100) / 60
print(percentage)

"""**Comments**"""

# compute the percentage of the hour thathas elapsed
percentage = (minute * 100) / 60

percentage = (minute * 100) / 60  # caution: integer division

"""The integer division operator is like a comment that says, " I know this is integer division, and I like it that way!"
"""

percentage = (minute * 100) // 60